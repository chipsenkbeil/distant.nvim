local utils = require('distant-core.utils')

describe('distant-core.utils.clean_term_line', function()
    it('should remove carriage return characters', function()
        assert.are.equal('sometext', utils.clean_term_line('some\rtext'))
    end)

    it('should remove escape sequences in the form ^[1;31m', function()
        -- \x1b is ^[ and we need to test ^[NN;NN;NNm and ^[NN;NN;NNK
        assert.are.equal('sometext', utils.clean_term_line('some\x1b[1mtext'))
        assert.are.equal('sometext', utils.clean_term_line('some\x1b[12mtext'))
        assert.are.equal('sometext', utils.clean_term_line('some\x1b[1;1mtext'))
        assert.are.equal('sometext', utils.clean_term_line('some\x1b[1;12mtext'))
        assert.are.equal('sometext', utils.clean_term_line('some\x1b[12;1mtext'))
        assert.are.equal('sometext', utils.clean_term_line('some\x1b[12;12mtext'))
        assert.are.equal('sometext', utils.clean_term_line('some\x1b[1;1;1mtext'))
        assert.are.equal('sometext', utils.clean_term_line('some\x1b[12;1;1mtext'))
        assert.are.equal('sometext', utils.clean_term_line('some\x1b[1;12;1mtext'))
        assert.are.equal('sometext', utils.clean_term_line('some\x1b[1;1;12mtext'))
        assert.are.equal('sometext', utils.clean_term_line('some\x1b[1;12;12mtext'))
        assert.are.equal('sometext', utils.clean_term_line('some\x1b[12;1;12mtext'))
        assert.are.equal('sometext', utils.clean_term_line('some\x1b[12;12;12mtext'))

        assert.are.equal('sometext', utils.clean_term_line('some\x1b[1Ktext'))
        assert.are.equal('sometext', utils.clean_term_line('some\x1b[12Ktext'))
        assert.are.equal('sometext', utils.clean_term_line('some\x1b[1;1Ktext'))
        assert.are.equal('sometext', utils.clean_term_line('some\x1b[1;12Ktext'))
        assert.are.equal('sometext', utils.clean_term_line('some\x1b[12;1Ktext'))
        assert.are.equal('sometext', utils.clean_term_line('some\x1b[12;12Ktext'))
        assert.are.equal('sometext', utils.clean_term_line('some\x1b[1;1;1Ktext'))
        assert.are.equal('sometext', utils.clean_term_line('some\x1b[12;1;1Ktext'))
        assert.are.equal('sometext', utils.clean_term_line('some\x1b[1;12;1Ktext'))
        assert.are.equal('sometext', utils.clean_term_line('some\x1b[1;1;12Ktext'))
        assert.are.equal('sometext', utils.clean_term_line('some\x1b[1;12;12Ktext'))
        assert.are.equal('sometext', utils.clean_term_line('some\x1b[12;1;12Ktext'))
        assert.are.equal('sometext', utils.clean_term_line('some\x1b[12;12;12Ktext'))
    end)
end)
